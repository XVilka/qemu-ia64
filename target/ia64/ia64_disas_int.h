/*-
 * Copyright (c) 2000-2006 Marcel Moolenaar
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $FreeBSD$
 */

#ifndef _IA64_DISAS_INT_H_
#define	_IA64_DISAS_INT_H_

#ifdef _IA64_DISAS_H_
#error	Include ia64_disas_int.h before ia64_disas.h
#endif

/*
 * Instruction bundle specifics.
 */
#define	TMPL_BITS	5
#define	SLOT_BITS	41
#define	SLOT_COUNT	3

#define	BUNDLE_SIZE	(SLOT_COUNT * SLOT_BITS + TMPL_BITS)
#define	BUNDLE_BYTES	((BUNDLE_SIZE+7) >> 3)
#define	TMPL_MASK	((1 << TMPL_BITS) - 1)
#define	SLOT_MASK	((1ULL << SLOT_BITS) - 1ULL)
#define	TMPL(p)		(*(const uint8_t*)(p) & TMPL_MASK)

static inline uint32_t
le32dec(const void *pp)
{
        uint8_t const *p = (uint8_t const *)pp;
 
        return (((unsigned)p[3] << 24) | (p[2] << 16) | (p[1] << 8) | p[0]);
}
 
static inline uint64_t
le64dec(const void *pp)
{
         uint8_t const *p = (uint8_t const *)pp;
 
         return (((uint64_t)le32dec(p + 4) << 32) | le32dec(p));
}

#define	_SLOT(p,i)	(le64dec((const uint8_t *)(p) + ((i) << 2)))
#define	SLOT(p,i)	((_SLOT(p,i) >> (TMPL_BITS+((i)<<3)+(i))) & SLOT_MASK)

/*
 * Instruction specifics
 */
#define	_FLD64(i,o,l)	((i >> o) & ((1LL << l) - 1LL))
#define	FIELD(i,o,l)	((uint32_t)_FLD64(i,o,l))
#define	OPCODE(i)	FIELD(i, 37, 4)
#define	QP_BITS		6
#define	QP(i)		FIELD(i, 0, QP_BITS)
#define	REG_BITS	7
#define	REG(i,r)	FIELD(i, ((r) - 1) * REG_BITS + QP_BITS, REG_BITS)

/*
 * Opcodes used internally as sentinels to denote either a lack of more
 * specific information or to preserve the additional state/information
 * we already have and need to pass around for later use.
 */
#define	IA64_ADDITIONAL_OPCODES						\
	IA64_OP_INTERNAL_OPCODES,					\
	IA64_OP_BR_CALL, IA64_OP_BR_CEXIT, IA64_OP_BR_CLOOP,		\
	IA64_OP_BR_COND, IA64_OP_BR_CTOP, IA64_OP_BR_IA,		\
	IA64_OP_BR_RET,	IA64_OP_BR_WEXIT, IA64_OP_BR_WTOP,		\
	IA64_OP_BREAK_B, IA64_OP_BREAK_F, IA64_OP_BREAK_I,		\
	IA64_OP_BREAK_M, IA64_OP_BREAK_X,				\
	IA64_OP_BRL_COND, IA64_OP_BRL_CALL,				\
	IA64_OP_BRP_, IA64_OP_BRP_RET,					\
	IA64_OP_BSW_0, IA64_OP_BSW_1,					\
	IA64_OP_CHK_A_CLR, IA64_OP_CHK_A_NC, IA64_OP_CHK_S,		\
	IA64_OP_CHK_S_I, IA64_OP_CHK_S_M,				\
	IA64_OP_CLRRRB_, IA64_OP_CLRRRB_PR,				\
	IA64_OP_CMP_EQ, IA64_OP_CMP_EQ_AND, IA64_OP_CMP_EQ_OR,		\
	IA64_OP_CMP_EQ_OR_ANDCM, IA64_OP_CMP_EQ_UNC,			\
	IA64_OP_CMP_GE_AND, IA64_OP_CMP_GE_OR, IA64_OP_CMP_GE_OR_ANDCM,	\
	IA64_OP_CMP_GT_AND, IA64_OP_CMP_GT_OR, IA64_OP_CMP_GT_OR_ANDCM,	\
	IA64_OP_CMP_LE_AND, IA64_OP_CMP_LE_OR, IA64_OP_CMP_LE_OR_ANDCM,	\
	IA64_OP_CMP_LT, IA64_OP_CMP_LT_AND, IA64_OP_CMP_LT_OR,		\
	IA64_OP_CMP_LT_OR_ANDCM, IA64_OP_CMP_LT_UNC, IA64_OP_CMP_LTU,	\
	IA64_OP_CMP_LTU_UNC, IA64_OP_CMP_NE_AND, IA64_OP_CMP_NE_OR,	\
	IA64_OP_CMP_NE_OR_ANDCM,					\
	IA64_OP_CMP4_EQ, IA64_OP_CMP4_EQ_AND, IA64_OP_CMP4_EQ_OR,	\
	IA64_OP_CMP4_EQ_OR_ANDCM, IA64_OP_CMP4_EQ_UNC,			\
	IA64_OP_CMP4_GE_AND, IA64_OP_CMP4_GE_OR,			\
	IA64_OP_CMP4_GE_OR_ANDCM, IA64_OP_CMP4_GT_AND,			\
	IA64_OP_CMP4_GT_OR, IA64_OP_CMP4_GT_OR_ANDCM,			\
	IA64_OP_CMP4_LE_AND, IA64_OP_CMP4_LE_OR,			\
	IA64_OP_CMP4_LE_OR_ANDCM, IA64_OP_CMP4_LT, IA64_OP_CMP4_LT_AND,	\
	IA64_OP_CMP4_LT_OR, IA64_OP_CMP4_LT_OR_ANDCM,			\
	IA64_OP_CMP4_LT_UNC, IA64_OP_CMP4_LTU, IA64_OP_CMP4_LTU_UNC,	\
	IA64_OP_CMP4_NE_AND, IA64_OP_CMP4_NE_OR,			\
	IA64_OP_CMP4_NE_OR_ANDCM,					\
	IA64_OP_CMP8XCHG16_ACQ, IA64_OP_CMP8XCHG16_REL,			\
	IA64_OP_CMPXCHG1_ACQ, IA64_OP_CMPXCHG1_REL,			\
	IA64_OP_CMPXCHG2_ACQ, IA64_OP_CMPXCHG2_REL,			\
	IA64_OP_CMPXCHG4_ACQ, IA64_OP_CMPXCHG4_REL,			\
	IA64_OP_CMPXCHG8_ACQ, IA64_OP_CMPXCHG8_REL,			\
	IA64_OP_CZX1_L, IA64_OP_CZX1_R,					\
	IA64_OP_CZX2_L, IA64_OP_CZX2_R,					\
	IA64_OP_DEP_, IA64_OP_DEP_Z,					\
	IA64_OP_FC_, IA64_OP_FC_I,					\
	IA64_OP_FCLASS_M,						\
	IA64_OP_FCVT_FX, IA64_OP_FCVT_FX_TRUNC, IA64_OP_FCVT_FXU,	\
	IA64_OP_FCVT_FXU_TRUNC, IA64_OP_FCVT_XF,			\
	IA64_OP_FETCHADD4_ACQ, IA64_OP_FETCHADD4_REL,			\
	IA64_OP_FETCHADD8_ACQ, IA64_OP_FETCHADD8_REL,			\
	IA64_OP_FMA_, IA64_OP_FMA_D, IA64_OP_FMA_S,			\
	IA64_OP_FMERGE_NS, IA64_OP_FMERGE_S, IA64_OP_FMERGE_SE,		\
	IA64_OP_FMIX_L, IA64_OP_FMIX_LR, IA64_OP_FMIX_R,		\
	IA64_OP_FMS_, IA64_OP_FMS_D, IA64_OP_FMS_S,			\
	IA64_OP_FNMA_, IA64_OP_FNMA_D, IA64_OP_FNMA_S,			\
	IA64_OP_FPCMP_EQ, IA64_OP_FPCMP_LE, IA64_OP_FPCMP_LT,		\
	IA64_OP_FPCMP_NEQ, IA64_OP_FPCMP_NLE, IA64_OP_FPCMP_NLT,	\
	IA64_OP_FPCMP_ORD, IA64_OP_FPCMP_UNORD,				\
	IA64_OP_FPCVT_FX, IA64_OP_FPCVT_FX_TRUNC, IA64_OP_FPCVT_FXU,	\
	IA64_OP_FPCVT_FXU_TRUNC,					\
	IA64_OP_FPMERGE_NS, IA64_OP_FPMERGE_S, IA64_OP_FPMERGE_SE,	\
	IA64_OP_FSWAP_, IA64_OP_FSWAP_NL, IA64_OP_FSWAP_NR,		\
	IA64_OP_FSXT_L, IA64_OP_FSXT_R,					\
	IA64_OP_GETF_D, IA64_OP_GETF_EXP, IA64_OP_GETF_S,		\
	IA64_OP_GETF_SIG,						\
	IA64_OP_HINT_B, IA64_OP_HINT_F, IA64_OP_HINT_I, IA64_OP_HINT_M,	\
	IA64_OP_HINT_X,							\
	IA64_OP_INVALA_, IA64_OP_INVALA_E,				\
	IA64_OP_ITC_D, IA64_OP_ITC_I,					\
	IA64_OP_ITR_D, IA64_OP_ITR_I,					\
	IA64_OP_LD1_, IA64_OP_LD1_A, IA64_OP_LD1_ACQ, IA64_OP_LD1_BIAS,	\
	IA64_OP_LD1_C_CLR, IA64_OP_LD1_C_CLR_ACQ, IA64_OP_LD1_C_NC,	\
	IA64_OP_LD1_S, IA64_OP_LD1_SA,					\
	IA64_OP_LD16_, IA64_OP_LD16_ACQ,				\
	IA64_OP_LD2_, IA64_OP_LD2_A, IA64_OP_LD2_ACQ, IA64_OP_LD2_BIAS,	\
	IA64_OP_LD2_C_CLR, IA64_OP_LD2_C_CLR_ACQ, IA64_OP_LD2_C_NC,	\
	IA64_OP_LD2_S, IA64_OP_LD2_SA,					\
	IA64_OP_LD4_, IA64_OP_LD4_A, IA64_OP_LD4_ACQ, IA64_OP_LD4_BIAS,	\
	IA64_OP_LD4_C_CLR, IA64_OP_LD4_C_CLR_ACQ, IA64_OP_LD4_C_NC,	\
	IA64_OP_LD4_S, IA64_OP_LD4_SA,					\
	IA64_OP_LD8_, IA64_OP_LD8_A, IA64_OP_LD8_ACQ, IA64_OP_LD8_BIAS,	\
	IA64_OP_LD8_C_CLR, IA64_OP_LD8_C_CLR_ACQ, IA64_OP_LD8_C_NC,	\
	IA64_OP_LD8_FILL, IA64_OP_LD8_S, IA64_OP_LD8_SA,		\
	IA64_OP_LDF_FILL,						\
	IA64_OP_LDF8_, IA64_OP_LDF8_A, IA64_OP_LDF8_C_CLR,		\
	IA64_OP_LDF8_C_NC, IA64_OP_LDF8_S, IA64_OP_LDF8_SA,		\
	IA64_OP_LDFD_, IA64_OP_LDFD_A, IA64_OP_LDFD_C_CLR,		\
	IA64_OP_LDFD_C_NC, IA64_OP_LDFD_S, IA64_OP_LDFD_SA,		\
	IA64_OP_LDFE_, IA64_OP_LDFE_A, IA64_OP_LDFE_C_CLR,		\
	IA64_OP_LDFE_C_NC, IA64_OP_LDFE_S, IA64_OP_LDFE_SA,		\
	IA64_OP_LDFP8_, IA64_OP_LDFP8_A, IA64_OP_LDFP8_C_CLR,		\
	IA64_OP_LDFP8_C_NC, IA64_OP_LDFP8_S, IA64_OP_LDFP8_SA,		\
	IA64_OP_LDFPD_, IA64_OP_LDFPD_A, IA64_OP_LDFPD_C_CLR,		\
	IA64_OP_LDFPD_C_NC, IA64_OP_LDFPD_S, IA64_OP_LDFPD_SA,		\
	IA64_OP_LDFPS_, IA64_OP_LDFPS_A, IA64_OP_LDFPS_C_CLR,		\
	IA64_OP_LDFPS_C_NC, IA64_OP_LDFPS_S, IA64_OP_LDFPS_SA,		\
	IA64_OP_LDFS_, IA64_OP_LDFS_A, IA64_OP_LDFS_C_CLR,		\
	IA64_OP_LDFS_C_NC, IA64_OP_LDFS_S, IA64_OP_LDFS_SA,		\
	IA64_OP_LFETCH_, IA64_OP_LFETCH_EXCL, IA64_OP_LFETCH_FAULT,	\
	IA64_OP_LFETCH_FAULT_EXCL,					\
	IA64_OP_MF_, IA64_OP_MF_A,					\
	IA64_OP_MIX1_L, IA64_OP_MIX1_R,					\
	IA64_OP_MIX2_L, IA64_OP_MIX2_R,					\
	IA64_OP_MIX4_L, IA64_OP_MIX4_R,					\
	IA64_OP_MOV_, IA64_OP_MOV_CPUID, IA64_OP_MOV_DBR,		\
	IA64_OP_MOV_I, IA64_OP_MOV_IBR, IA64_OP_MOV_IP, IA64_OP_MOV_M,	\
	IA64_OP_MOV_MSR, IA64_OP_MOV_PKR, IA64_OP_MOV_PMC,		\
	IA64_OP_MOV_PMD, IA64_OP_MOV_PR, IA64_OP_MOV_PSR,		\
	IA64_OP_MOV_PSR_L, IA64_OP_MOV_PSR_UM, IA64_OP_MOV_RET,		\
	IA64_OP_MOV_RR,							\
	IA64_OP_NOP_B, IA64_OP_NOP_F, IA64_OP_NOP_I, IA64_OP_NOP_M,	\
	IA64_OP_NOP_X,							\
	IA64_OP_PACK2_SSS, IA64_OP_PACK2_USS,				\
	IA64_OP_PACK4_SSS,						\
	IA64_OP_PADD1_, IA64_OP_PADD1_SSS, IA64_OP_PADD1_UUS,		\
	IA64_OP_PADD1_UUU,						\
	IA64_OP_PADD2_, IA64_OP_PADD2_SSS, IA64_OP_PADD2_UUS,		\
	IA64_OP_PADD2_UUU,						\
	IA64_OP_PAVG1_, IA64_OP_PAVG1_RAZ,				\
	IA64_OP_PAVG2_, IA64_OP_PAVG2_RAZ,				\
	IA64_OP_PCMP1_EQ, IA64_OP_PCMP1_GT,				\
	IA64_OP_PCMP2_EQ, IA64_OP_PCMP2_GT,				\
	IA64_OP_PCMP4_EQ, IA64_OP_PCMP4_GT,				\
	IA64_OP_PMAX1_U,						\
	IA64_OP_PMIN1_U,						\
	IA64_OP_PMPY2_L, IA64_OP_PMPY2_R,				\
	IA64_OP_PMPYSHR2_, IA64_OP_PMPYSHR2_U,				\
	IA64_OP_PROBE_R, IA64_OP_PROBE_R_FAULT, IA64_OP_PROBE_RW_FAULT,	\
	IA64_OP_PROBE_W, IA64_OP_PROBE_W_FAULT,				\
	IA64_OP_PSHR2_, IA64_OP_PSHR2_U,				\
	IA64_OP_PSHR4_, IA64_OP_PSHR4_U,				\
	IA64_OP_PSUB1_, IA64_OP_PSUB1_SSS, IA64_OP_PSUB1_UUS,		\
	IA64_OP_PSUB1_UUU,						\
	IA64_OP_PSUB2_, IA64_OP_PSUB2_SSS, IA64_OP_PSUB2_UUS,		\
	IA64_OP_PSUB2_UUU,						\
	IA64_OP_PTC_E, IA64_OP_PTC_G, IA64_OP_PTC_GA, IA64_OP_PTC_L,	\
	IA64_OP_PTR_D, IA64_OP_PTR_I,					\
	IA64_OP_SETF_EXP, IA64_OP_SETF_D, IA64_OP_SETF_S,		\
	IA64_OP_SETF_SIG,						\
	IA64_OP_SHR_, IA64_OP_SHR_U,					\
	IA64_OP_SRLZ_D, IA64_OP_SRLZ_I,					\
	IA64_OP_ST1_, IA64_OP_ST1_REL,					\
	IA64_OP_ST16_, IA64_OP_ST16_REL,				\
	IA64_OP_ST2_, IA64_OP_ST2_REL,					\
	IA64_OP_ST4_, IA64_OP_ST4_REL,					\
	IA64_OP_ST8_, IA64_OP_ST8_REL, IA64_OP_ST8_SPILL,		\
	IA64_OP_STF_SPILL,						\
	IA64_OP_SYNC_I,							\
	IA64_OP_TBIT_NZ_AND, IA64_OP_TBIT_NZ_OR,			\
	IA64_OP_TBIT_NZ_OR_ANDCM, IA64_OP_TBIT_Z, IA64_OP_TBIT_Z_AND,	\
	IA64_OP_TBIT_Z_OR, IA64_OP_TBIT_Z_OR_ANDCM, IA64_OP_TBIT_Z_UNC,	\
	IA64_OP_TF_NZ_AND, IA64_OP_TF_NZ_OR, IA64_OP_TF_NZ_OR_ANDCM,	\
	IA64_OP_TF_Z, IA64_OP_TF_Z_AND, IA64_OP_TF_Z_OR,		\
	IA64_OP_TF_Z_OR_ANDCM, IA64_OP_TF_Z_UNC,			\
	IA64_OP_TNAT_NZ_AND, IA64_OP_TNAT_NZ_OR,			\
	IA64_OP_TNAT_NZ_OR_ANDCM, IA64_OP_TNAT_Z, IA64_OP_TNAT_Z_AND,	\
	IA64_OP_TNAT_Z_OR, IA64_OP_TNAT_Z_OR_ANDCM, IA64_OP_TNAT_Z_UNC,	\
	IA64_OP_UNPACK1_H, IA64_OP_UNPACK1_L,				\
	IA64_OP_UNPACK2_H, IA64_OP_UNPACK2_L,				\
	IA64_OP_UNPACK4_H, IA64_OP_UNPACK4_L,				\
	IA64_OP_VMSW_0, IA64_OP_VMSW_1,					\
	IA64_OP_XMA_H, IA64_OP_XMA_HU, IA64_OP_XMA_L,			\
	IA64_OP_NUMBER_OF_OPCODES

#endif /* _IA64_DISAS_INT_H_ */
